version: "3.7"

networks:
  server-connection:
    driver: bridge

services:
  reverse-nginx:
    container_name: nginx-proxy-hoppang
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt/live/hoppang.store/fullchain.pem:/etc/nginx/ssl/hoppang-store-certificate.crt:ro # hoppang.store 인증서
      - /etc/letsencrypt/live/hoppang.store/privkey.pem:/etc/nginx/ssl/hoppang-store-private.key:ro # hoppang.store 인증서
    networks:
      - server-connection
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - back-end-app
      - web-front-end-app

  database-master:
    container_name: hoppang_database_master
    build:
      context: ./
      dockerfile: master/Dockerfile
    restart: unless-stopped
    platform: linux/x86_64
    environment:
      MYSQL_DATABASE: hoppang
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: 'root'
      MYSQL_ROOT_PASSWORD: 1234567
      TZ: 'Asia/Seoul'
    ports:
      - "3307:3306"
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - my-db-master:/var/lib/mysql
      - my-db-master:/var/lib/mysql-files
    networks:
      - server-connection

  database-slave:
    container_name: hoppang_database_slave
    build:
      context: ./
      dockerfile: slave/Dockerfile
    restart: unless-stopped
    platform: linux/x86_64
    environment:
      MYSQL_DATABASE: hoppang
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: 'root'
      MYSQL_ROOT_PASSWORD: 1234567
      TZ: 'Asia/Seoul'
    ports:
      - "3308:3306"
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - my-db-slave:/var/lib/mysql
      - my-db-slave:/var/lib/mysql-files
    networks:
      - server-connection
    depends_on:
      - database-master

  cache-redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - server-connection

  back-end-app:
    build:
      context: ./
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9090:9090"
      - "9091:9091"
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - database-master
      - database-slave
      - cache-redis
    command:
      - /bin/sh
      - -c
      - |
        mkdir -p /app/logs
        chmod 777 /app/logs
        chown root:root /app/logs
        ./gradlew bootRun
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - HOPPANG_SLACK_BOT_TOKEN=${HOPPANG_SLACK_BOT_TOKEN}
      - TZ=Asia/Seoul
    networks:
      - server-connection
    volumes:
      - /home/twj/hoppang-app/logs:/app/logs
    user: root

  web-front-end-app:
    container_name: hoppang_web_front
    image: dndxowjd/hoppang-web-fe:0.01
    restart: always
    expose:
      - "10244"
    networks:
      - server-connection

  prometheus:
    image: prom/prometheus:v2.37.6
    container_name: prometheus
    user: "$UID:$GID"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    ports:
      - "8080:8080"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=30d # 30일보다 오래된 metrics는 삭제
      - --storage.tsdb.retention.size=10GB # 10GB를 넘을 시 오래된 metrics 삭제
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/proemtheus/consoles
      - --web.enable-admin-api
    restart: always
    networks:
      - server-connection

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    user: "$UID:$GID"
    volumes:
      - /home/twj/hopppang/grafana/alerting:/var/lib/grafana/alerting:rw
      - ./grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: always
    depends_on:
      - prometheus
    networks:
      - server-connection

volumes:
  dev-log:
    external: true
  my-db-master:
  my-db-slave:
  grafana-storage: